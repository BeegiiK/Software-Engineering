title Catan Junior Sequence Diagrams


actor Player
entity View
control Controller
database Model

//Player Turn
activate Controller
loop Player Turn
View->Player: Query: Roll die
activate View
Player->View: Instruction: Roll die
View->View: Check for allowed input
View->Controller: Instruction: Get Die Roll number
activate Controller
deactivate View
Controller->Controller: Instruction: Get Dice Value
Controller->View: Instruction: Show Dice value
activate View
deactivate Controller
View->Player: Show Die Result
deactivate View

//Alt Case 6 is rolled
  alt Case 1: A 6 is rolled
  Controller->Controller: Get possible Ghost \n Captain locations
  activate Controller
  Controller->View: List of allowable Locations
  deactivate Controller
  activate View
  View->Player: Show Ghost captain Locations
  Player->View: Send Chosen location
  View->View: Check for allowed input
  View->Controller: Send New Ghost \n captain location 
  deactivate View
  activate Controller
  Controller->Model: Move Ghost captain
  activate Model
  Model->Model: Move Ghost captain
  deactivate Model

  View->Controller: Get the updated map
  activate View
  Controller->View: Send Updated map
  deactivate Controller
  View->Player: Show Map
  deactivate View
  end

//Alt Case 1-5 is rolled
  alt Case 1: A 1-5 is rolled 
  activate Controller

  Controller->Model: Get Lair location\n owners for each tile
  activate Model
  Model->Model: Get Lairs owners\n for each tile
  Model->Controller: Send Lairs Owners\n for each tile
  deactivate Model
  
  Controller->Controller: Get Resource gains\nfor each player
  Controller->Model:Check if resources order \ncan be met
  activate Model
  deactivate Controller
  Model->Model: Get current resources
  Model->Controller:Send player piles \nand stock
  deactivate Model
  alt Case 1.1 Not enough resources in stockile
  activate Controller
  Controller->Model: Recall depleted resource\n from all players
  activate Model
  Model->Model: Update player piles
  Model->Controller: Send new player piles
  deactivate Model
  Controller->Controller: Recalculate gains\n from die rolls
    Controller->Model: Update Player piles
    activate Model
    Controller->Model: Update Stock piles
    deactivate Model
    Controller->View: Send Player piles changes
    activate View
    deactivate Controller
    View->Player: Display Player pile changes
    deactivate View
  end 
  
  alt Case 1.2 Enough resources in stockpile
   
    activate Controller
    Controller->Model: Update Player piles
    activate Model
    Controller->Model: Update Stock piles
    deactivate Model
    Controller->View: Send Player piles changes
    activate View
    deactivate Controller
    View->Player: Display Player pile changes
    deactivate View
    end
    
  end
  
   loop Main Menu
   View->Player: Display Main Menu
   activate View
   Player->View: Select main menu\noption
   View->View: Check for valid \ninput
   deactivate View
   
     alt Case 1: View Map
     activate View
     View->Controller: Get updated map
     activate Controller
     Controller->Model: Get Updated Map
     activate Model
     Model->Model: Get updated Map
     Model->Controller: Send updated map
     deactivate Model
     Controller->View: Send updated map
     deactivate Controller
     View->Player: Display Map
     deactivate View
     end

     alt Case 2: View Stockpile
     activate View
     View->Controller: Get updated stockpile
     activate Controller
     Controller->Model: Get Updated stockpile
     activate Model
     Model->Model: Get updated stockpile
     Model->Controller: Send updated stockpile
     deactivate Model
     Controller->View: Send updated stockpile
     deactivate Controller
     View->Player: Display stockpile
     deactivate View
     end 

     alt Case 3: View Player Pile
     activate View
     View->Controller: Get updated Player Pile
     activate Controller
     Controller->Model: Get Updated Player Pile
     activate Model
     Model->Model: Get updated Player Pile
     Model->Controller: Send updated Player Pile
     deactivate Model
     Controller->View: Send updated Player Pile
     deactivate Controller
     View->Player: Display Player Pile
     deactivate View
     end 
     
     alt Case 3: Buy CocoTile
     View->Player: Confirm Player action
     activate View
     alt Player Rejects Choice
     Player->View: Player deicdes no
     
     end
     
     alt Case 4: Accepts Choice
     Player->View: Player decides yes
     View->Controller: Buy Cocotile
     activate Controller
     deactivate View
     Controller->Model: Check if player\n has enough resources
     deactivate Controller
     activate Model
     Model->Model: Check player resources
     deactivate Model
     alt Player cant afford CocoTile 
     Model->Controller: Report lack of Resoruces
     activate Controller
     Controller->View: Report lack of resources
     deactivate Controller
     activate View
     View->Player: Inform player of \nfailed buy attempt
     View->Player: Display main menu
     deactivate View
     end 
     
     alt Player Can Afford Cocotile
     Controller->Controller: Get ramdom \nCoco-Tile\nfrom pile

     
     alt Coco-Tile Ghost Captain
     	Controller->Controller: Get possible Ghost \n Captain locations
        activate Controller
        Controller->View: List of allowable Locations
        deactivate Controller
        activate View
        View->Player: Show Ghost captain Locations
        Player->View: Send Chosen location
        View->View: Check for allowed input
        View->Controller: Send New Ghost \n captain location 
        deactivate View
        activate Controller
        Controller->Model: Move Ghost captain
        activate Model
        Model->Model: Move Ghost captain
        deactivate Model
        deactivate Controller
     end
     
     alt Coco-Tile Resource Molasses & Wood
     Controller->Model: Take resources \nfrom pile
     activate Controller
    alt Not enough resources in stockile
    activate Controller
    Controller->Model: Recall depleted resource\n from all players
    activate Model
    Model->Model: Update player piles
    Model->Controller: Send new player piles
    deactivate Model
    Controller->Controller: Recalculate gains\n Cocotile
      Controller->Model: Update Player pile
      activate Model
      Controller->Model: Update Stock pile
      deactivate Model
      Controller->View: Send Player gains
      activate View
      deactivate Controller
      View->Player:Display Player gains
      deactivate Controller
      deactivate View
      end 
      alt Enough Resources in stockpile
      Model->Model:Get Resoruces \nfrom stockpile
      activate Model
      Model->Model: Move Resources to player pile
      Model->Controller: Confirm Resource transfer
      deactivate Model
      activate Controller
      Controller->View: Inform on resource change
      activate View
      deactivate Controller
      View->Player:Display Player resource change
      deactivate View
      end 
      end 
      
     alt Coco-Tile Resource Cutlasses & Goats
          Controller->Model: Take resources \nfrom pile
     activate Controller
    alt Not enough resources in stockile
    activate Controller
    Controller->Model: Recall depleted resource\n from all players
    activate Model
    Model->Model: Update player piles
    Model->Controller: Send new player piles
    deactivate Model
    Controller->Controller: Recalculate gains\n Cocotile
      Controller->Model: Update Player pile
      activate Model
      Controller->Model: Update Stock pile
      deactivate Model
      Controller->View: Send Player gains
      activate View
      deactivate Controller
      View->Player: Display Player gains
      deactivate View
      end 
      alt Enough Resources in stockpile
      Model->Model:Get Resoruces \nfrom stockpile
      activate Model
      Model->Model: Move Resources to player pile
      Model->Controller: Confirm Resource transfer
      deactivate Model
      activate Controller
      Controller->View: Inform on resource change
      activate View
      deactivate Controller
      View->Player:Display Player resource change
      deactivate View
      end 
     end
    
    alt Coco-Tile Build Lair/Ship
    	View->Player: Choose build type
        activate View
        Player->View: Chosen Lair or Ship
        View->View: Check for valid input
        
        alt Build Ship
        View->Controller: Build Ship
        activate Controller
        Controller->Model: Get updated Map
        activate Model
        Model->Model: Get updated Map
        Model->Controller: Send updated map
        Controller->Model: Load Player inventory
        Model->Model: Get player inventory
        Model->Controller: Send player inventory
        deactivate Model
        Controller->Controller: Check player inventory
        Controller->Controller: Get allowable \nbuild locations
        Controller->View: Send allowable locations
        deactivate Controller
        activate View
        View->Player: Show allowable ship locations 
        Player->View: Send chosen lair location
        View->View: Check for viable input
        View->Controller: Send build location
        deactivate View
        activate Controller
        Controller->Controller: Build Ship
        Controller->Controller: Update Map
        Controller->Model:  Update Map
        Controller->View: Send updated Map
        deactivate Controller
        activate View
        View->Player: Print Updated map
        deactivate View
    end
    
       alt Build Lair
        View->Controller: Build Lair
        activate Controller
        Controller->Model: Get updated Map
        activate Model
        Model->Model: Get updated Map
        Model->Controller: Send updated map
        Controller->Model: Load Player inventory
        Model->Model: Get player inventory
        Model->Controller: Send player inventory
        deactivate Model
        Controller->Controller: Check player inventory
        Controller->Controller: Get allowable \nbuild locations
        Controller->View: Send allowable locations
        deactivate Controller
        activate View
        View->Player: Show allowable lair locations 
        Player->View: Send chosen lair location
        View->View: Check for viable input
        View->Controller: Send build location
        deactivate View
        activate Controller
        Controller->Controller: Build Lair
        Controller->Controller: Update Map
        Controller->Model:  Update Map
        Controller->View: Send updated Map
        deactivate Controller
        activate View
        View->Player: Print Updated map
        Controller->Controller: Check if player wins
        alt Player Wins
        Controller->View: Player wins
        View->Player: Print player victory messeage
        end 
        alt No winner decided

        deactivate View
        deactivate Controller
        
    end
        
    end
    
  end 
  

// Loop for main menu
 
end
end

end
  alt Case 5: Build Lair/Ship
  	       alt Build Lair
           
        View->Controller: Build Lair
        Controller->Controller: Check if player\n has enough resources
        activate Controller
        Controller->Model: Get updated Map
        activate Model
        Model->Model: Get updated Map
        Model->Controller: Send updated map
        Controller->Model: Load Player inventory
        Model->Model: Get player inventory
        Model->Controller: Send player inventory
        deactivate Model
        Controller->Controller: Check player inventory
        Controller->Controller: Get allowable \nbuild locations
        Controller->View: Send allowable locations
        deactivate Controller
        activate View
        View->Player: Show allowable lair locations 
        Player->View: Send chosen lair location
        View->View: Check for viable input
        View->Controller: Send build location
        deactivate View
        activate Controller
        Controller->Controller: Build Lair
        Controller->Controller: Update Map
        Controller->Model:  Update Map
        Controller->View: Send updated Map
        deactivate Controller
        activate View
        View->Player: Print Updated map
        Controller->Controller: Check if player wins
        alt Player Wins
        Controller->View: Player wins
        View->Player: Print player victory messeage
        end 
        alt No winner decided

        deactivate View
        deactivate Controller
        
    end
  end
      alt Build Ship

      activate Controller
        View->Controller: Build Ship
        Controller->Controller: Check if player\n has enough resources
        Controller->Model: Get updated Map
        activate Model
        Model->Model: Get updated Map
        Model->Controller: Send updated map
        Controller->Model: Load Player inventory
        Model->Model: Get player inventory
        Model->Controller: Send player inventory
        deactivate Model
        Controller->Controller: Check player inventory
        Controller->Controller: Get allowable \nbuild locations
        Controller->View: Send allowable locations
        deactivate Controller
        activate View
        View->Player: Show allowable ship locations 
        Player->View: Send chosen lair location
        View->View: Check for viable input
        View->Controller: Send build location
        deactivate View
        activate Controller
        Controller->Controller: Build Ship
        Controller->Controller: Update Map
        Controller->Model:  Update Map
        Controller->View: Send updated Map
        deactivate Controller
        activate View
        View->Player: Print Updated map
        deactivate View
    end
end
end
end 